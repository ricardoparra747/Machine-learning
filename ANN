function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 17-Nov-2020 12:00:09.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx6 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [20;5;50;0;0;30];
x1_step1.gain = [0.1;0.5;0.02;0.4;0.4;0.0285714285714286];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.10036331694129117797;0.058888877248433474376;0.20476907133134575334;-0.142522748622061185;-0.37451309359831008727;-0.3669579660334295057;0.84912227129876116649;-0.051820259598171124205;0.012293439048200455535;0.01999862283332621074];
IW1_1 = [-0.035173695298780484342 -0.070227950577690351208 0.086728935969380541171 0.04125349876272556976 0.20374837372373946764 0.0048421647884173864285;-0.027135249696457090091 -0.056390002445460114811 0.063539882356088039916 0.020501252869655282873 0.14863214309566064042 -0.012909665963875745567;0.19111116150345966447 -0.42628133230030129663 0.20196045696506276235 -0.20326302160112658113 0.30400291030053411268 -0.13641193874787158058;0.048904300659399276008 0.071074500024527129116 -0.10532206768876448133 -0.069162422602118189818 -0.24947094590109222811 -0.029559493678963055102;-0.68728853113803534125 0.43201698657936993264 0.31442660518960824367 -0.32825866573106143864 -0.092847353493575549011 -0.055576097806886833042;0.60521928990717943631 -0.13369348748647949532 -0.34496028602891171122 0.82421038641435551142 -0.47203894407936569655 -0.1792195479569470562;0.46134271165218687649 0.36307919183574394184 -0.49064092363376438088 -1.0497108770667027411 -0.63428682772699751524 0.32683323353701976277;0.026029842188300435224 0.052285776782105365668 -0.05875300380245552373 -0.017663948499538353887 -0.1371132300396972481 0.01470441301281069299;-0.011107811120248108766 -0.0163665212142074315 0.019347614791803215833 0.0036766045367444418444 0.043264379762219438985 -0.0089764317333983524583;-0.016333536872907648135 -0.025451820598787533445 0.029688959979569523595 0.0061810250480234382384 0.067090946071338239398 -0.012983435219829614349];

% Layer 2
b2 = -0.22955476648076986179;
LW2_1 = [-0.25851917012230091197 -0.18773704508205177333 -0.62955124626985847769 0.31653084330429676063 -0.85633026479782803353 -0.97291107684319089177 -1.3162016214550871229 0.17288231811235113544 -0.053867442946622309807 -0.08372055184996450572];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.790513833992095;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
